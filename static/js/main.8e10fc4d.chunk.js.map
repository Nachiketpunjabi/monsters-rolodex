{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","App","state","searchfield","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAYeA,EAVF,SAACC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,MAC/D,+BAAKL,EAAMI,QAAQE,KAAnB,OACA,8BAAIN,EAAMI,QAAQG,MAAlB,WCQGC,EAXC,SAACR,GAEb,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACN,GAClB,OAAO,cAAC,EAAD,CAAMA,QAASA,UCoCtBO,E,kDAtCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXH,SAAS,GACTI,YAAY,IALH,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CAA8CC,MAAK,SAACC,GACxD,OAAOA,EAASC,UACfF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACV,SAASS,S,oBAGzC,WAAS,IAAD,OAEN,EAAgCE,KAAKR,MAA9BH,EAAP,EAAOA,SAAUI,EAAjB,EAAiBA,YACXQ,EAAmBZ,EAASa,QAAO,SAAAlB,GAAO,OAC9CA,EAAQE,KAAKiB,cAAcC,SAASX,EAAYU,kBAIlD,OAEE,sBAAKtB,UAAU,MAAf,UACE,kDACA,uBAAOwB,KAAK,SAASC,YAAY,iBAAiBC,SAAU,SAAAC,GAC1D,EAAKT,SAAS,CAACN,YAAae,EAAEC,OAAOC,QAAO,kBAAIC,QAAQC,IAAIX,SAG9D,cAAC,EAAD,CAAUZ,SAAUY,W,GAhCVY,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e10fc4d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt='monster' src= {`https://robohash.org/${props.monster.id}`} />\r\n            <h1>{props.monster.name} </h1>\r\n            <p>{props.monster.email} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './CardList.css'\r\nimport Card from '../card/Card.jsx'\r\n\r\nconst CardList= (props) => {\r\n    \r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map((monster) => {\r\n               return <Card monster={monster}></Card>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","\nimport './App.css';\nimport {Component} from 'react';\nimport CardList from './components/card-list/CardList';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      monsters:[],\n      searchfield:\"\"\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then((response)=>{\n      return response.json()\n    }).then(users=>this.setState({monsters:users}))\n  }\n\n  render(){\n\n    const {monsters, searchfield} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchfield.toLowerCase())\n    );\n\n\n    return (\n      \n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1> \n        <input type=\"search\" placeholder=\"search monster\" onChange={e=>{\n          this.setState({searchfield: e.target.value},()=>console.log(filteredMonsters))\n          \n        }} />\n        <CardList monsters={filteredMonsters}/>\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}